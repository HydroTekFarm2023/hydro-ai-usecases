Started by user [8mha:////4CA5kL0r8XoTT3PdnVI1PoGEnxCwKlCoPhe73Uyy/FdkAAAAlx+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAyBEgZu/dLi1CL9xLzSrEQAtdxjnMAAAAA=[0manuja somthankar
Running as SYSTEM
Building in workspace C:\ProgramData\Jenkins\.jenkins\workspace\Hydrotek-CICD-Pipeline
[Hydrotek-CICD-Pipeline] $ "C:\Program Files\Git\bin\sh.exe" -xe C:\Users\anuja\AppData\Local\Temp\jenkins14352330531493031863.sh
+ echo 'Hydrotek CICD'
Hydrotek CICD
+ echo 'CI selected ControllerApp'
CI selected ControllerApp
+ echo 'CD selected ControllerApp'
CD selected ControllerApp
+ echo 'Tag selected v3'
Tag selected v3
+ BRANCH=pestclassification-tcet
+ IMAGE_TAG=v3
+ SELECTED_APP_CI_ARRAY=ControllerApp
+ SELECTED_APP_CD_ARRAY=ControllerApp
+ REPOSITORY_DIR=hydro-ai-usecases
+ CONTAINER_REGISTRY=gcr.io/hydrotek-286213
+ CI_WORK_DIR=./hydrotek/cicdbuild/
+ TEST_DIR=Postman-Tests
+ NAMESPACE=dev
+ NETWORKTYPE=LoadBalancer
+ PORTNUM=5000
+ DIR=/c/ProgramData/Jenkins/.jenkins/workspace/Hydrotek-CICD-Pipeline
+ echo 'CI/CD Pipeline Started'
CI/CD Pipeline Started
+ '[' -z devcloud ']'
+ setenv
+ echo devcloud
devcloud
+ [[ devcloud == \d\e\v\c\l\o\u\d ]]
+ echo 'Dev Cloud'
Dev Cloud
+ ENVFILE=hydroTek-Dev-Cloud.postman_environment.json
+ echo 'dev cloud'
dev cloud
+ gcloud container clusters get-credentials autopilot-cluster-1 --region us-central1 --project hydrotek-286213
Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Manage App Execution Aliases.
Fetching cluster endpoint and auth data.
kubeconfig entry generated for autopilot-cluster-1.
+ echo 'Cluster Name: kt-ai-autopilot-cluster1'
Cluster Name: kt-ai-autopilot-cluster1
+ NETWORKTYPE=LoadBalancer
+ '[' -z ControllerApp ']'
+ mainCI
+ echo 'MAIN CI'
MAIN CI
+ a=(${SELECTED_APP_CI_ARRAY[0]})
+ echo ControllerApp
ControllerApp
+ '[' ControllerApp == All ']'
+ IFS=', '
+ read -r -a arr
+ for i in "${arr[@]}"
+ temp=ControllerApp
+ temp=ControllerApp
+ echo ControllerApp
ControllerApp
+ i=ControllerApp
+ case "$i" in
+ SELECTED_APP_CI=ControllerApp
+ CI_DIR=ControllerApp
+ REPOSITORY_DIR=hydro-ai-usecases
+ CONTAINERNAME=controller
+ CI_WORK_DIR=./hydrotek/cicdbuild/
+ CONTAINER_REGISTRY=gcr.io/hydrotek-286213
+ IMAGE_TAG=release
+ genericCI ControllerApp ControllerApp hydro-ai-usecases controller ./hydrotek/cicdbuild/ gcr.io/hydrotek-286213 release
+ SELECTED_APP_CI=ControllerApp
+ CI_DIR=ControllerApp
+ REPOSITORY_DIR=hydro-ai-usecases
+ CONTAINERNAME=controller
+ CI_WORK_DIR=./hydrotek/cicdbuild/
+ CONTAINER_REGISTRY=gcr.io/hydrotek-286213
+ IMAGE_TAG=v3
+ echo 'GENERIC CI'
GENERIC CI
+ echo 'Beginning Integration of ControllerApp'
Beginning Integration of ControllerApp
+ mkdir -p ./hydrotek/cicdbuild/
+ cd ./hydrotek/cicdbuild/
+ '[' -d hydro-ai-usecases ']'
+ cd hydro-ai-usecases
+ git pull
From gitlab.com:hydrotek-ai-grp/hydro-ai-usecases
   17d53b34..ca85b966  pestclassification-tcet -> origin/pestclassification-tcet
Updating 17d53b34..ca85b966
Fast-forward
 ControllerApp/app/addNotification.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
+ gcloud auth print-access-token
+ docker login -u oauth2accesstoken --password-stdin https://gcr.io
Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Manage App Execution Aliases.
Login Succeeded
+ cd ControllerApp
+ echo 'Docker Build gcr.io/hydrotek-286213/controller:v3 '
Docker Build gcr.io/hydrotek-286213/controller:v3 
+ docker build --no-cache -t gcr.io/hydrotek-286213/controller:v3 .
#1 [internal] load build definition from Dockerfile
#1 sha256:41f0146ca584f8d95c7a515f36101a393e96ac301effad1932da20e3a67db046
#1 transferring dockerfile: 32B done
#1 DONE 0.0s

#2 [internal] load .dockerignore
#2 sha256:c6d109d7601039f38090d5beb63256f6bf80544b285359931ef2499a378606a9
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [internal] load metadata for docker.io/library/node:16
#3 sha256:fcebe6595ccabc9db4d2477733f2265fb18ca302607dd9a9e445f4ebdfd1189a
#3 DONE 1.1s

#4 [1/3] FROM docker.io/library/node:16@sha256:ffe804d6fcced29bcfc3477de079d03a9c2b0e4917e44bfeafb1a6b0f875e383
#4 sha256:bc31ad4563208bbf10475628f9d494c225b44a4f8f94780595a5cf41ee2eb2a0
#4 CACHED

#5 [internal] load build context
#5 sha256:cdac791e318935cc05be44912001d3f1a571a1c19f3dc86289287e5571cd5acc
#5 transferring context: 1.22MB 0.8s done
#5 DONE 0.8s

#6 [2/3] COPY . .
#6 sha256:edec541160d7cc63f7de67c37b2216bc63afa9132ff54976e262671c26d63ea9
#6 DONE 1.2s

#7 [3/3] WORKDIR ./app
#7 sha256:abc8b93cd0914c102788049b6128e2e2fa8ff8738fb2736f111cf1dfa6c917b8
#7 DONE 0.1s

#8 exporting to image
#8 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00
#8 exporting layers
#8 exporting layers 1.4s done
#8 writing image sha256:512bb896db82c753e74b2a78d354c4d980944292f8c284d2ed25e6070c2f0331 done
#8 naming to gcr.io/hydrotek-286213/controller:v3 done
#8 DONE 1.5s

Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them
+ echo 'Docker Push gcr.io/hydrotek-286213/controller:v3'
Docker Push gcr.io/hydrotek-286213/controller:v3
+ docker push gcr.io/hydrotek-286213/controller:v3
The push refers to repository [gcr.io/hydrotek-286213/controller]
5f70bf18a086: Preparing
9b2ce76839d1: Preparing
c3ee875c63ae: Preparing
01281c2cd1e4: Preparing
a9ce14d4c51f: Preparing
9e6164f16476: Preparing
627d03f17169: Preparing
6b9b07bf46f5: Preparing
88139fe969ab: Preparing
83f556e4c108: Preparing
7362f7f77851: Preparing
9e6164f16476: Waiting
627d03f17169: Waiting
6b9b07bf46f5: Waiting
83f556e4c108: Waiting
7362f7f77851: Waiting
c3ee875c63ae: Layer already exists
01281c2cd1e4: Layer already exists
a9ce14d4c51f: Layer already exists
5f70bf18a086: Layer already exists
9e6164f16476: Layer already exists
6b9b07bf46f5: Layer already exists
627d03f17169: Layer already exists
88139fe969ab: Layer already exists
83f556e4c108: Layer already exists
7362f7f77851: Layer already exists
9b2ce76839d1: Pushed
v3: digest: sha256:bf9bc1aa7f67d099e0099ec3833a17782675e3c7ffc71b5736be60fb430ca108 size: 2632
+ cd /c/ProgramData/Jenkins/.jenkins/workspace/Hydrotek-CICD-Pipeline
+ '[' -z ControllerApp ']'
+ mainCD
+ echo 'MAIN CD'
MAIN CD
+ a=(${SELECTED_APP_CD_ARRAY[0]})
+ echo ControllerApp
ControllerApp
+ '[' ControllerApp == All ']'
+ IFS=', '
+ read -r -a arr
+ for i in "${arr[@]}"
+ temp=ControllerApp
+ temp=ControllerApp
+ echo ControllerApp
ControllerApp
+ i=ControllerApp
+ case "$i" in
+ echo ControllerApp
ControllerApp
+ SELECTED_APP_CI=ControllerApp
+ DEPLOYMENT=controller
+ NAMESPACE=dev
+ CONTAINERNAME=controller
+ CONTAINER_REGISTRY=gcr.io/hydrotek-286213
+ IMAGE_TAG=release
+ PORTNUM=3000
+ genericCD ControllerApp controller dev controller gcr.io/hydrotek-286213 release 3000
+ SELECTED_APP_CD=ControllerApp
+ DEPLOYMENT=controller
+ NAMESPACE=dev
+ CONTAINERNAME=controller
+ CONTAINER_REGISTRY=gcr.io/hydrotek-286213
+ IMAGE_TAG=v3
+ PORTNUM=3000
+ echo 'GENERIC CD'
GENERIC CD
+ echo 'Begining Deployment of ControllerApp'
Begining Deployment of ControllerApp
+ kubectl get deployments controller --namespace dev
+ grep -q controller
+ echo 'Updating the deployment with latest version'
Updating the deployment with latest version
+ SELECTED_IMAGE=gcr.io/hydrotek-286213/controller:v3
+ echo 'Selected Image gcr.io/hydrotek-286213/controller:v3'
Selected Image gcr.io/hydrotek-286213/controller:v3
+ echo 'kubectl set image deployment/controller controller=gcr.io/hydrotek-286213/controller:v3 --namespace dev'
kubectl set image deployment/controller controller=gcr.io/hydrotek-286213/controller:v3 --namespace dev
+ kubectl set image deployment/controller controller=gcr.io/hydrotek-286213/controller:v3 --namespace dev
+ echo 'kubectl rollout restart deployment controller --namespace dev'
kubectl rollout restart deployment controller --namespace dev
+ kubectl rollout restart deployment controller --namespace dev
deployment.apps/controller restarted
+ echo 'Updated Deployment'
Updated Deployment
+ echo 'kubectl set env -n dev --from=secret/mongocredentialsdevcloud deployment/controller'
kubectl set env -n dev --from=secret/mongocredentialsdevcloud deployment/controller
+ kubectl set env -n dev --from=secret/mongocredentialsdevcloud deployment/controller
+ cd /c/ProgramData/Jenkins/.jenkins/workspace/Hydrotek-CICD-Pipeline
+ '[' -z '' ']'
+ echo 'No project was selected for testing'
No project was selected for testing
Finished: SUCCESS
