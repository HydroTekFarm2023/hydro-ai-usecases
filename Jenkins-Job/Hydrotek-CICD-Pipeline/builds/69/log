Started by user [8mha:////4CA5kL0r8XoTT3PdnVI1PoGEnxCwKlCoPhe73Uyy/FdkAAAAlx+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAyBEgZu/dLi1CL9xLzSrEQAtdxjnMAAAAA=[0manuja somthankar
Running as SYSTEM
Building in workspace C:\ProgramData\Jenkins\.jenkins\workspace\Hydrotek-CICD-Pipeline
[Hydrotek-CICD-Pipeline] $ "C:\Program Files\Git\bin\sh.exe" -xe C:\Users\anuja\AppData\Local\Temp\jenkins8784351933774343460.sh
+ echo 'Hydrotek CICD'
Hydrotek CICD
+ echo 'CI selected ControllerApp'
CI selected ControllerApp
+ echo 'CD selected ControllerApp'
CD selected ControllerApp
+ BRANCH=pestclassification-tcet
+ IMAGE_TAG=release
+ SELECTED_APP_CI_ARRAY=ControllerApp
+ SELECTED_APP_CD_ARRAY=ControllerApp
+ REPOSITORY_DIR=hydro-ai-usecases
+ CONTAINER_REGISTRY=gcr.io/hydrotek-286213
+ CI_WORK_DIR=./hydrotek/cicdbuild/
+ DEPLOYMENT=hydrotekapp-deployment
+ NAMESPACE=dev
+ NETWORKTYPE=LoadBalancer
+ PORTNUM=5000
+ DIR=/c/ProgramData/Jenkins/.jenkins/workspace/Hydrotek-CICD-Pipeline
+ echo 'CI/CD Pipeline Started'
CI/CD Pipeline Started
+ '[' -z devcloud ']'
+ setenv
+ echo devcloud
devcloud
+ [[ devcloud == \d\e\v ]]
+ [[ devcloud == \d\e\v\c\l\o\u\d ]]
+ echo 'dev cloud'
dev cloud
+ gcloud container clusters get-credentials autopilot-cluster-1 --region us-central1 --project hydrotek-286213
Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Manage App Execution Aliases.
Fetching cluster endpoint and auth data.
kubeconfig entry generated for autopilot-cluster-1.
+ echo 'Cluster Name: kt-ai-autopilot-cluster1'
Cluster Name: kt-ai-autopilot-cluster1
+ NETWORKTYPE=LoadBalancer
+ '[' -z ControllerApp ']'
+ mainCI
+ echo 'MAIN CI'
MAIN CI
+ a=(${SELECTED_APP_CI_ARRAY[0]})
+ echo ControllerApp
ControllerApp
+ '[' ControllerApp == All ']'
+ IFS=', '
+ read -r -a arr
+ for i in "${arr[@]}"
+ temp=ControllerApp
+ temp=ControllerApp
+ echo ControllerApp
ControllerApp
+ i=ControllerApp
+ case "$i" in
+ SELECTED_APP_CI=ControllerApp
+ CI_DIR=ControllerApp
+ REPOSITORY_DIR=hydro-ai-usecases
+ CONTAINERNAME=controller
+ CI_WORK_DIR=./hydrotek/cicdbuild/
+ CONTAINER_REGISTRY=gcr.io/hydrotek-286213
+ IMAGE_TAG=release
+ genericCI ControllerApp ControllerApp hydro-ai-usecases controller ./hydrotek/cicdbuild/ gcr.io/hydrotek-286213 release
+ SELECTED_APP_CI=ControllerApp
+ CI_DIR=ControllerApp
+ REPOSITORY_DIR=hydro-ai-usecases
+ CONTAINERNAME=controller
+ CI_WORK_DIR=./hydrotek/cicdbuild/
+ CONTAINER_REGISTRY=gcr.io/hydrotek-286213
+ IMAGE_TAG=release
+ echo 'GENERIC CI'
GENERIC CI
+ echo 'Begining Integration of ControllerApp'
Begining Integration of ControllerApp
+ mkdir -p ./hydrotek/cicdbuild/
+ cd ./hydrotek/cicdbuild/
+ '[' -d hydro-ai-usecases ']'
+ cd hydro-ai-usecases
+ git pull
From gitlab.com:hydrotek-ai-grp/hydro-ai-usecases
   032bb2f..210c7d1  pestclassification-tcet -> origin/pestclassification-tcet
Updating 032bb2f..210c7d1
Fast-forward
 ControllerApp/dockerfile | 24 ++++++++++++++++++++++++
 1 file changed, 24 insertions(+)
 create mode 100644 ControllerApp/dockerfile
+ gcloud auth print-access-token
+ docker login -u oauth2accesstoken --password-stdin https://gcr.io
Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Manage App Execution Aliases.
Login Succeeded
+ cd ControllerApp
+ echo 'Docker Build gcr.io/hydrotek-286213/controller:release '
Docker Build gcr.io/hydrotek-286213/controller:release 
+ docker build -t gcr.io/hydrotek-286213/controller:release .
#1 [internal] load build definition from Dockerfile
#1 sha256:a0edc02a1ad68231e1f7ad50c3523f809f231cec81b1a5f9d0e19d3a5a4ddc8d
#1 transferring dockerfile: 772B done
#1 DONE 0.0s

#2 [internal] load .dockerignore
#2 sha256:11a640f857ad9e558ffe97a96237a994973d84e7609d229cc3420ac5f79cccb7
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [internal] load metadata for docker.io/library/node:16
#3 sha256:fcebe6595ccabc9db4d2477733f2265fb18ca302607dd9a9e445f4ebdfd1189a
#3 DONE 2.5s

#4 [1/3] FROM docker.io/library/node:16@sha256:68e34cfcd8276ad531b12b3454af5c24cd028752dfccacce4e19efef6f7cdbe0
#4 sha256:5a6e7225f307eecc5191d4f2f0ebe64c8b3c5b59ba31a8d8acd752bac691bad4
#4 DONE 0.0s

#5 [internal] load build context
#5 sha256:3b5be2c173a095bf5ccb340fba712db51feeaa19d5c2049a127a4c127d91b629
#5 transferring context: 102.32MB 2.6s
#5 transferring context: 138.72MB 3.6s done
#5 DONE 3.7s

#4 [1/3] FROM docker.io/library/node:16@sha256:68e34cfcd8276ad531b12b3454af5c24cd028752dfccacce4e19efef6f7cdbe0
#4 sha256:5a6e7225f307eecc5191d4f2f0ebe64c8b3c5b59ba31a8d8acd752bac691bad4
#4 CACHED

#6 [2/3] COPY . .
#6 sha256:fc109cff93b52418ecf7adbe0cc8eda00f4cbe101ef24ec28dc0c8ac3b97ece2
#6 DONE 4.5s

#7 [3/3] RUN npm i nodemon -g
#7 sha256:d5e384bc54f6c0352a42cf1a9032d68d3adb21ff3dd797e40a1b3fa7ba1c4205
#7 9.690 
#7 9.690 added 116 packages, and audited 117 packages in 7s
#7 9.690 
#7 9.690 16 packages are looking for funding
#7 9.690   run `npm fund` for details
#7 9.691 
#7 9.691 found 0 vulnerabilities
#7 9.692 npm notice 
#7 9.692 npm notice New patch version of npm available! 8.5.0 -> 8.5.5
#7 9.692 npm notice Changelog: <https://github.com/npm/cli/releases/tag/v8.5.5>
#7 9.692 npm notice Run `npm install -g npm@8.5.5` to update!
#7 9.692 npm notice 
#7 DONE 9.8s

#8 exporting to image
#8 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00
#8 exporting layers
#8 exporting layers 1.6s done
#8 writing image sha256:358aa02f3763b1ce10326f4c52bf8fb40e2506e0a984cfa4b744b593c1d75476 done
#8 naming to gcr.io/hydrotek-286213/controller:release done
#8 DONE 1.7s

Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them
+ echo 'Docker Push gcr.io/hydrotek-286213/controller:release'
Docker Push gcr.io/hydrotek-286213/controller:release
+ docker push gcr.io/hydrotek-286213/controller:release
The push refers to repository [gcr.io/hydrotek-286213/controller]
526faa324723: Preparing
6d853de87422: Preparing
29b084c6c0fb: Preparing
c4c1c7e1b593: Preparing
ffa412e341ec: Preparing
609caaacd3c7: Preparing
19414f2bac52: Preparing
dfab2047e46f: Preparing
f467c8b30ad7: Preparing
3b197f32f66b: Preparing
3f65e6373268: Preparing
dfab2047e46f: Waiting
3b197f32f66b: Waiting
f467c8b30ad7: Waiting
609caaacd3c7: Waiting
3f65e6373268: Waiting
19414f2bac52: Waiting
c4c1c7e1b593: Layer already exists
ffa412e341ec: Layer already exists
29b084c6c0fb: Layer already exists
609caaacd3c7: Layer already exists
19414f2bac52: Layer already exists
dfab2047e46f: Layer already exists
f467c8b30ad7: Layer already exists
3b197f32f66b: Layer already exists
3f65e6373268: Layer already exists
526faa324723: Pushed
6d853de87422: Pushed
release: digest: sha256:e1e626717dcac85ad951d14ca1470761d83474b1af094f6a0bd6471061f97c0d size: 2637
+ cd /c/ProgramData/Jenkins/.jenkins/workspace/Hydrotek-CICD-Pipeline
+ '[' -z ControllerApp ']'
+ mainCD
+ echo 'MAIN CD'
MAIN CD
+ a=(${SELECTED_APP_CD_ARRAY[0]})
+ echo ControllerApp
ControllerApp
+ '[' ControllerApp == All ']'
+ IFS=', '
+ read -r -a arr
+ for i in "${arr[@]}"
+ temp=ControllerApp
+ temp=ControllerApp
+ echo ControllerApp
ControllerApp
+ i=ControllerApp
+ case "$i" in
+ echo ControllerApp
ControllerApp
+ SELECTED_APP_CI=ControllerApp
+ DEPLOYMENT=controller
+ NAMESPACE=dev
+ CONTAINERNAME=controller
+ CONTAINER_REGISTRY=gcr.io/hydrotek-286213
+ IMAGE_TAG=release
+ PORTNUM=3000
+ genericCD ControllerApp controller dev controller gcr.io/hydrotek-286213 release 3000
+ SELECTED_APP_CD=ControllerApp
+ DEPLOYMENT=controller
+ NAMESPACE=dev
+ CONTAINERNAME=controller
+ CONTAINER_REGISTRY=gcr.io/hydrotek-286213
+ IMAGE_TAG=release
+ PORTNUM=3000
+ echo 'GENERIC CD'
GENERIC CD
+ echo 'Begining Deployment of ControllerApp'
Begining Deployment of ControllerApp
+ kubectl get deployments controller --namespace dev
+ grep -q controller
Error from server (NotFound): deployments.apps "controller" not found
+ echo 'New deployemnt'
New deployemnt
+ echo 'kubectl create deployment controller --image=gcr.io/hydrotek-286213/controller:release --namespace dev'
kubectl create deployment controller --image=gcr.io/hydrotek-286213/controller:release --namespace dev
+ kubectl create deployment controller --image=gcr.io/hydrotek-286213/controller:release --namespace dev
Warning: Autopilot set default resource requests for Deployment dev/controller, as resource requests were not specified. See http://g.co/gke/autopilot-defaults.
deployment.apps/controller created
+ echo 'kubectl expose deployment controller --type=LoadBalancer --port 3000 --namespace dev'
kubectl expose deployment controller --type=LoadBalancer --port 3000 --namespace dev
+ kubectl expose deployment controller --type=LoadBalancer --port 3000 --namespace dev
service/controller exposed
+ sleep 15
+ echo 'kubectl set env -n dev --from=secret/mongocredentialsdevcloud deployment/controller'
kubectl set env -n dev --from=secret/mongocredentialsdevcloud deployment/controller
+ kubectl set env -n dev --from=secret/mongocredentialsdevcloud deployment/controller
deployment.apps/controller env updated
+ cd /c/ProgramData/Jenkins/.jenkins/workspace/Hydrotek-CICD-Pipeline
Finished: SUCCESS
