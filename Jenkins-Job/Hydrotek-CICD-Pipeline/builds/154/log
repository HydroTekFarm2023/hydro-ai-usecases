Started by user [8mha:////4CA5kL0r8XoTT3PdnVI1PoGEnxCwKlCoPhe73Uyy/FdkAAAAlx+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAyBEgZu/dLi1CL9xLzSrEQAtdxjnMAAAAA=[0manuja somthankar
Running as SYSTEM
Building in workspace C:\ProgramData\Jenkins\.jenkins\workspace\Hydrotek-CICD-Pipeline
[Hydrotek-CICD-Pipeline] $ "C:\Program Files\Git\bin\sh.exe" -xe C:\Users\anuja\AppData\Local\Temp\jenkins336489838149416354.sh
+ echo 'Hydrotek CICD'
Hydrotek CICD
+ echo 'CI selected swagger'
CI selected swagger
+ echo 'CD selected swagger'
CD selected swagger
+ echo 'Tag selected v1'
Tag selected v1
+ BRANCH=pestclassification-tcet
+ IMAGE_TAG=v1
+ SELECTED_APP_CI_ARRAY=swagger
+ SELECTED_APP_CD_ARRAY=swagger
+ REPOSITORY_DIR=hydro-ai-usecases
+ CONTAINER_REGISTRY=gcr.io/hydrotek-286213
+ CI_WORK_DIR=./hydrotek/cicdbuild/
+ TEST_DIR=Postman-Tests
+ NAMESPACE=dev
+ NETWORKTYPE=LoadBalancer
+ PORTNUM=5000
+ DIR=/c/ProgramData/Jenkins/.jenkins/workspace/Hydrotek-CICD-Pipeline
+ echo 'CI/CD Pipeline Started'
CI/CD Pipeline Started
+ '[' -z devcloud ']'
+ setenv
+ echo devcloud
devcloud
+ [[ devcloud == \d\e\v\c\l\o\u\d ]]
+ echo 'Dev Cloud'
Dev Cloud
+ ENVFILE=hydroTek-Dev-Cloud.postman_environment.json
+ echo 'dev cloud'
dev cloud
+ gcloud container clusters get-credentials autopilot-cluster-1 --region us-central1 --project hydrotek-286213
Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Manage App Execution Aliases.
Fetching cluster endpoint and auth data.
kubeconfig entry generated for autopilot-cluster-1.
+ echo 'Cluster Name: kt-ai-autopilot-cluster1'
Cluster Name: kt-ai-autopilot-cluster1
+ NETWORKTYPE=LoadBalancer
+ '[' -z swagger ']'
+ mainCI
+ echo 'MAIN CI'
MAIN CI
+ a=(${SELECTED_APP_CI_ARRAY[0]})
+ echo swagger
swagger
+ '[' swagger == All ']'
+ IFS=', '
+ read -r -a arr
+ for i in "${arr[@]}"
+ temp=swagger
+ temp=swagger
+ echo swagger
swagger
+ i=swagger
+ case "$i" in
+ echo swagger
swagger
+ SELECTED_APP_CI=Swagger
+ CI_DIR=swagger
+ REPOSITORY_DIR=hydro-ai-usecases
+ CONTAINERNAME=hydrotekswagger
+ CI_WORK_DIR=./hydrotek/cicdbuild/
+ CONTAINER_REGISTRY=gcr.io/hydrotek-286213
+ IMAGE_TAG=release
+ genericCI Swagger swagger hydro-ai-usecases hydrotekswagger ./hydrotek/cicdbuild/ gcr.io/hydrotek-286213 release
+ SELECTED_APP_CI=Swagger
+ CI_DIR=swagger
+ REPOSITORY_DIR=hydro-ai-usecases
+ CONTAINERNAME=hydrotekswagger
+ CI_WORK_DIR=./hydrotek/cicdbuild/
+ CONTAINER_REGISTRY=gcr.io/hydrotek-286213
+ IMAGE_TAG=v1
+ echo 'GENERIC CI'
GENERIC CI
+ echo 'Beginning Integration of Swagger'
Beginning Integration of Swagger
+ mkdir -p ./hydrotek/cicdbuild/
+ cd ./hydrotek/cicdbuild/
+ '[' -d hydro-ai-usecases ']'
+ cd hydro-ai-usecases
+ git pull
From gitlab.com:hydrotek-ai-grp/hydro-ai-usecases
   364f0cf4..76d43397  pestclassification-tcet -> origin/pestclassification-tcet
Updating 364f0cf4..76d43397
Fast-forward
 Swagger/{swagger-api/doc => }/Dockerfile | 0
 Swagger/{swagger-api => doc}/Swagger.yml | 0
 2 files changed, 0 insertions(+), 0 deletions(-)
 rename Swagger/{swagger-api/doc => }/Dockerfile (100%)
 rename Swagger/{swagger-api => doc}/Swagger.yml (100%)
+ gcloud auth print-access-token
+ docker login -u oauth2accesstoken --password-stdin https://gcr.io
Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Manage App Execution Aliases.
Login Succeeded
+ cd Swagger
+ echo 'Docker Build gcr.io/hydrotek-286213/hydrotekswagger:v1 '
Docker Build gcr.io/hydrotek-286213/hydrotekswagger:v1 
+ docker build --no-cache -t gcr.io/hydrotek-286213/hydrotekswagger:v1 .
#1 [internal] load build definition from Dockerfile
#1 sha256:022c6e85df4961e44a0308c365e18607d6a309615f1c34a9f039f53f2db04439
#1 transferring dockerfile: 196B done
#1 DONE 0.0s

#2 [internal] load .dockerignore
#2 sha256:85665616c6256698cc7085ca8dfb074cb3c8c3fc06cb580e174aa228067bf90e
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [internal] load metadata for docker.io/swaggerapi/swagger-ui:latest
#3 sha256:7cb8cc8dd21ac0433c0e4d609cd894a768645e10d3c30e1150f4afafa65f12d7
#3 DONE 3.1s

#4 [1/4] FROM docker.io/swaggerapi/swagger-ui@sha256:e02d9a36909f0a45ca2163e563df5ebb8292db29d2e853e3a4f9ad1a523f5f0e
#4 sha256:f4a4dccb9c1a9695f7987da384fb3e57501a98419a81c69a2633adb7238ffa6d
#4 resolve docker.io/swaggerapi/swagger-ui@sha256:e02d9a36909f0a45ca2163e563df5ebb8292db29d2e853e3a4f9ad1a523f5f0e 0.0s done
#4 sha256:40e059520d199e1a1a259089077f2a0c879951c9a4540490bad3a0d7714c6ae7 0B / 2.81MB 0.2s
#4 sha256:f206cf0d6188016c9a1c85d531cbaca2144cba9525e58ede0b7b538ad1a5ee13 0B / 7.34MB 0.2s
#4 sha256:065a4ca9176e7dbc2df50043aa9f27b89451b70bd5c19188d419413cb7a4504d 0B / 599B 0.2s
#4 sha256:e02d9a36909f0a45ca2163e563df5ebb8292db29d2e853e3a4f9ad1a523f5f0e 2.82kB / 2.82kB done
#4 sha256:1d18001c7dfa01d4339594e7dc835850d11f7a525d5865e0169f0063d9d82e35 10.29kB / 10.29kB done
#4 ...

#5 [internal] load build context
#5 sha256:5c869b85f9b1f60f84d1688ce4370c2c99fcf463617d2cb725615dec59820e07
#5 transferring context: 13.41kB 0.4s done
#5 DONE 0.4s

#4 [1/4] FROM docker.io/swaggerapi/swagger-ui@sha256:e02d9a36909f0a45ca2163e563df5ebb8292db29d2e853e3a4f9ad1a523f5f0e
#4 sha256:f4a4dccb9c1a9695f7987da384fb3e57501a98419a81c69a2633adb7238ffa6d
#4 sha256:40e059520d199e1a1a259089077f2a0c879951c9a4540490bad3a0d7714c6ae7 2.81MB / 2.81MB 0.4s
#4 extracting sha256:40e059520d199e1a1a259089077f2a0c879951c9a4540490bad3a0d7714c6ae7
#4 sha256:40e059520d199e1a1a259089077f2a0c879951c9a4540490bad3a0d7714c6ae7 2.81MB / 2.81MB 0.4s done
#4 sha256:67124ec378c3b70408a77c08ac860c8b2ec0ee029afbefdaa251b5f2dc776e40 0B / 892B 0.5s
#4 sha256:065a4ca9176e7dbc2df50043aa9f27b89451b70bd5c19188d419413cb7a4504d 599B / 599B 0.5s done
#4 sha256:b17ba2c5bc9faf2b84543090fc36cd2ef51c9668047d1fc5c34824c821308db8 0B / 664B 0.7s
#4 extracting sha256:40e059520d199e1a1a259089077f2a0c879951c9a4540490bad3a0d7714c6ae7 0.3s done
#4 sha256:f206cf0d6188016c9a1c85d531cbaca2144cba9525e58ede0b7b538ad1a5ee13 5.24MB / 7.34MB 1.0s
#4 sha256:f206cf0d6188016c9a1c85d531cbaca2144cba9525e58ede0b7b538ad1a5ee13 6.29MB / 7.34MB 1.1s
#4 sha256:f206cf0d6188016c9a1c85d531cbaca2144cba9525e58ede0b7b538ad1a5ee13 7.34MB / 7.34MB 1.1s done
#4 sha256:b17ba2c5bc9faf2b84543090fc36cd2ef51c9668047d1fc5c34824c821308db8 664B / 664B 1.1s done
#4 extracting sha256:f206cf0d6188016c9a1c85d531cbaca2144cba9525e58ede0b7b538ad1a5ee13 0.1s
#4 sha256:f78950886575e1cb1804544d497d31cd6d7d9d68e56f5bf48d0d182bc99e748d 0B / 18.56MB 1.2s
#4 sha256:fed8f5509a6a95d0c0cd2a7bcc92d6c42aa0a82dd6662e43b7b01d2479852426 0B / 1.39kB 1.2s
#4 sha256:67124ec378c3b70408a77c08ac860c8b2ec0ee029afbefdaa251b5f2dc776e40 892B / 892B 1.2s done
#4 sha256:cac87628ce4585e7bfe01ec02ddf882c072c561542e6620d0f99110a035ced7b 0B / 939B 1.3s
#4 extracting sha256:f206cf0d6188016c9a1c85d531cbaca2144cba9525e58ede0b7b538ad1a5ee13 0.3s done
#4 extracting sha256:065a4ca9176e7dbc2df50043aa9f27b89451b70bd5c19188d419413cb7a4504d
#4 sha256:f78950886575e1cb1804544d497d31cd6d7d9d68e56f5bf48d0d182bc99e748d 4.19MB / 18.56MB 1.6s
#4 sha256:fed8f5509a6a95d0c0cd2a7bcc92d6c42aa0a82dd6662e43b7b01d2479852426 1.39kB / 1.39kB 1.4s done
#4 sha256:cac87628ce4585e7bfe01ec02ddf882c072c561542e6620d0f99110a035ced7b 939B / 939B 1.5s done
#4 extracting sha256:065a4ca9176e7dbc2df50043aa9f27b89451b70bd5c19188d419413cb7a4504d done
#4 sha256:46a511357d3fe0476416b3575c4bfbc8b934482954032bc86fe76a231e3d6972 0B / 2.67MB 1.6s
#4 extracting sha256:67124ec378c3b70408a77c08ac860c8b2ec0ee029afbefdaa251b5f2dc776e40 done
#4 sha256:df24de2e98c78abda18d44d175cad92b71d3217f820ce27278793ecb3af13043 0B / 737B 1.6s
#4 extracting sha256:b17ba2c5bc9faf2b84543090fc36cd2ef51c9668047d1fc5c34824c821308db8
#4 sha256:f78950886575e1cb1804544d497d31cd6d7d9d68e56f5bf48d0d182bc99e748d 5.24MB / 18.56MB 1.7s
#4 extracting sha256:b17ba2c5bc9faf2b84543090fc36cd2ef51c9668047d1fc5c34824c821308db8 done
#4 extracting sha256:fed8f5509a6a95d0c0cd2a7bcc92d6c42aa0a82dd6662e43b7b01d2479852426 done
#4 sha256:f78950886575e1cb1804544d497d31cd6d7d9d68e56f5bf48d0d182bc99e748d 8.39MB / 18.56MB 1.9s
#4 sha256:46a511357d3fe0476416b3575c4bfbc8b934482954032bc86fe76a231e3d6972 1.05MB / 2.67MB 1.9s
#4 sha256:f78950886575e1cb1804544d497d31cd6d7d9d68e56f5bf48d0d182bc99e748d 9.44MB / 18.56MB 2.0s
#4 sha256:f78950886575e1cb1804544d497d31cd6d7d9d68e56f5bf48d0d182bc99e748d 11.53MB / 18.56MB 2.2s
#4 sha256:46a511357d3fe0476416b3575c4bfbc8b934482954032bc86fe76a231e3d6972 2.67MB / 2.67MB 2.1s done
#4 sha256:df24de2e98c78abda18d44d175cad92b71d3217f820ce27278793ecb3af13043 737B / 737B 2.1s done
#4 sha256:a413089bb7b01cf748b0a6ad811c64a9261ff615b4abef2fde2cabab9662a10d 0B / 251B 2.2s
#4 sha256:561f831fc40e9a4a0940667afc47e2acc4fa5a3878bb20d2b09bd7575efa3f65 0B / 3.22kB 2.2s
#4 sha256:f78950886575e1cb1804544d497d31cd6d7d9d68e56f5bf48d0d182bc99e748d 13.63MB / 18.56MB 2.3s
#4 sha256:f78950886575e1cb1804544d497d31cd6d7d9d68e56f5bf48d0d182bc99e748d 15.73MB / 18.56MB 2.4s
#4 sha256:f78950886575e1cb1804544d497d31cd6d7d9d68e56f5bf48d0d182bc99e748d 18.56MB / 18.56MB 2.6s done
#4 sha256:a413089bb7b01cf748b0a6ad811c64a9261ff615b4abef2fde2cabab9662a10d 251B / 251B 2.5s done
#4 sha256:561f831fc40e9a4a0940667afc47e2acc4fa5a3878bb20d2b09bd7575efa3f65 3.22kB / 3.22kB 2.4s done
#4 extracting sha256:f78950886575e1cb1804544d497d31cd6d7d9d68e56f5bf48d0d182bc99e748d 0.1s
#4 extracting sha256:f78950886575e1cb1804544d497d31cd6d7d9d68e56f5bf48d0d182bc99e748d 0.4s done
#4 extracting sha256:cac87628ce4585e7bfe01ec02ddf882c072c561542e6620d0f99110a035ced7b done
#4 extracting sha256:46a511357d3fe0476416b3575c4bfbc8b934482954032bc86fe76a231e3d6972
#4 extracting sha256:46a511357d3fe0476416b3575c4bfbc8b934482954032bc86fe76a231e3d6972 0.1s done
#4 extracting sha256:df24de2e98c78abda18d44d175cad92b71d3217f820ce27278793ecb3af13043 done
#4 extracting sha256:561f831fc40e9a4a0940667afc47e2acc4fa5a3878bb20d2b09bd7575efa3f65 done
#4 extracting sha256:a413089bb7b01cf748b0a6ad811c64a9261ff615b4abef2fde2cabab9662a10d
#4 extracting sha256:a413089bb7b01cf748b0a6ad811c64a9261ff615b4abef2fde2cabab9662a10d done
#4 DONE 3.8s

#6 [2/4] COPY . ./
#6 sha256:a3b1d25a19014ec3ecd8f599943cc74c27345bc6c03656337343205af7543f6b
#6 DONE 0.1s

#7 [3/4] COPY ./doc/Swagger.yml ./usr/share/nginx/html/doc/Swagger.yml
#7 sha256:9affd1258bc3a232a36dae130f291da60f3874779995e3808e172ca24bd65c5b
#7 DONE 0.0s

#8 exporting to image
#8 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00
#8 exporting layers 0.0s done
#8 writing image sha256:219c0ec9b4fe800a2d8151d3e124fe5c0c269b480375ac004142e4f89c98a8ec done
#8 naming to gcr.io/hydrotek-286213/hydrotekswagger:v1 done
#8 DONE 0.1s

Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them
+ echo 'Docker Push gcr.io/hydrotek-286213/hydrotekswagger:v1'
Docker Push gcr.io/hydrotek-286213/hydrotekswagger:v1
+ docker push gcr.io/hydrotek-286213/hydrotekswagger:v1
The push refers to repository [gcr.io/hydrotek-286213/hydrotekswagger]
cd737932c15b: Preparing
7893239952f7: Preparing
00b57d3eca4c: Preparing
77e92176c164: Preparing
6d02a8fa1d10: Preparing
240475695e9d: Preparing
6de033b7aec2: Preparing
017c38ffc41f: Preparing
54ee1a00ced9: Preparing
3af7c638cfbc: Preparing
646222ea8196: Preparing
ede63c568879: Preparing
3b6043c185a1: Preparing
a1c01e366b99: Preparing
017c38ffc41f: Waiting
54ee1a00ced9: Waiting
3af7c638cfbc: Waiting
a1c01e366b99: Waiting
646222ea8196: Waiting
ede63c568879: Waiting
3b6043c185a1: Waiting
240475695e9d: Waiting
6de033b7aec2: Waiting
7893239952f7: Pushed
cd737932c15b: Pushed
77e92176c164: Pushed
00b57d3eca4c: Pushed
6d02a8fa1d10: Pushed
6de033b7aec2: Pushed
54ee1a00ced9: Pushed
3af7c638cfbc: Pushed
240475695e9d: Pushed
a1c01e366b99: Layer already exists
017c38ffc41f: Pushed
646222ea8196: Pushed
ede63c568879: Pushed
3b6043c185a1: Pushed
v1: digest: sha256:45e2b7a7a69806aae64f0affc6d5d5004fede8dc46407f797067ac06e688a4b4 size: 3237
+ cd /c/ProgramData/Jenkins/.jenkins/workspace/Hydrotek-CICD-Pipeline
+ '[' -z swagger ']'
+ mainCD
+ echo 'MAIN CD'
MAIN CD
+ a=(${SELECTED_APP_CD_ARRAY[0]})
+ echo swagger
swagger
+ '[' swagger == All ']'
+ IFS=', '
+ read -r -a arr
+ for i in "${arr[@]}"
+ temp=swagger
+ temp=swagger
+ echo swagger
swagger
+ i=swagger
+ case "$i" in
+ echo swagger
swagger
+ SELECTED_APP_CI=Swagger
+ DEPLOYMENT=hydrotekswagger
+ NAMESPACE=dev
+ CONTAINERNAME=hydrotekswagger
+ CONTAINER_REGISTRY=gcr.io/hydrotek-286213
+ IMAGE_TAG=release
+ PORTNUM=8080
+ genericCD Swagger hydrotekswagger dev hydrotekswagger gcr.io/hydrotek-286213 release 8080
+ SELECTED_APP_CD=Swagger
+ DEPLOYMENT=hydrotekswagger
+ NAMESPACE=dev
+ CONTAINERNAME=hydrotekswagger
+ CONTAINER_REGISTRY=gcr.io/hydrotek-286213
+ IMAGE_TAG=v1
+ PORTNUM=8080
+ echo 'GENERIC CD'
GENERIC CD
+ echo 'Begining Deployment of Swagger'
Begining Deployment of Swagger
+ kubectl get deployments hydrotekswagger --namespace dev
+ grep -q hydrotekswagger
Error from server (NotFound): deployments.apps "hydrotekswagger" not found
+ echo 'New deployemnt'
New deployemnt
+ echo 'kubectl create deployment hydrotekswagger --image=gcr.io/hydrotek-286213/hydrotekswagger:v1 --namespace dev'
kubectl create deployment hydrotekswagger --image=gcr.io/hydrotek-286213/hydrotekswagger:v1 --namespace dev
+ kubectl create deployment hydrotekswagger --image=gcr.io/hydrotek-286213/hydrotekswagger:v1 --namespace dev
Warning: Autopilot set default resource requests for Deployment dev/hydrotekswagger, as resource requests were not specified. See http://g.co/gke/autopilot-defaults.
deployment.apps/hydrotekswagger created
+ echo 'kubectl expose deployment hydrotekswagger --type=LoadBalancer --port 8080 --namespace dev'
kubectl expose deployment hydrotekswagger --type=LoadBalancer --port 8080 --namespace dev
+ kubectl expose deployment hydrotekswagger --type=LoadBalancer --port 8080 --namespace dev
service/hydrotekswagger exposed
+ [[ hydrotekswagger == \f\u\n\g\a\l\t\r\a\i\n\i\n\g\a\u\t\o\m\a\t\i\o\n ]]
+ [[ hydrotekswagger == \p\e\s\t\t\r\a\i\n\i\n\g\a\u\t\o\m\a\t\i\o\n ]]
+ sleep 15
+ echo 'kubectl set env -n dev --from=secret/mongocredentialsdevcloud deployment/hydrotekswagger'
kubectl set env -n dev --from=secret/mongocredentialsdevcloud deployment/hydrotekswagger
+ kubectl set env -n dev --from=secret/mongocredentialsdevcloud deployment/hydrotekswagger
deployment.apps/hydrotekswagger env updated
+ cd /c/ProgramData/Jenkins/.jenkins/workspace/Hydrotek-CICD-Pipeline
+ '[' -z '' ']'
+ echo 'No project was selected for testing'
No project was selected for testing
Finished: SUCCESS
