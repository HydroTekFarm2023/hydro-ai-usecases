Started by user [8mha:////4CA5kL0r8XoTT3PdnVI1PoGEnxCwKlCoPhe73Uyy/FdkAAAAlx+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAyBEgZu/dLi1CL9xLzSrEQAtdxjnMAAAAA=[0manuja somthankar
Running as SYSTEM
Building in workspace C:\ProgramData\Jenkins\.jenkins\workspace\Hydrotek-CICD-Pipeline
[Hydrotek-CICD-Pipeline] $ "C:\Program Files\Git\bin\sh.exe" -xe C:\Users\anuja\AppData\Local\Temp\jenkins1061349331702092385.sh
+ echo 'Hydrotek CICD'
Hydrotek CICD
+ echo 'CI selected fungal-training-automation'
CI selected fungal-training-automation
+ echo 'CD selected fungal-training-automation'
CD selected fungal-training-automation
+ echo 'Tag selected v1'
Tag selected v1
+ BRANCH=pestclassification-tcet
+ IMAGE_TAG=v1
+ SELECTED_APP_CI_ARRAY=fungal-training-automation
+ SELECTED_APP_CD_ARRAY=fungal-training-automation
+ REPOSITORY_DIR=hydro-ai-usecases
+ CONTAINER_REGISTRY=gcr.io/hydrotek-286213
+ CI_WORK_DIR=./hydrotek/cicdbuild/
+ NAMESPACE=dev
+ NETWORKTYPE=LoadBalancer
+ PORTNUM=5000
+ DIR=/c/ProgramData/Jenkins/.jenkins/workspace/Hydrotek-CICD-Pipeline
+ echo 'CI/CD Pipeline Started'
CI/CD Pipeline Started
+ '[' -z devcloud ']'
+ setenv
+ echo devcloud
devcloud
+ [[ devcloud == \d\e\v ]]
+ [[ devcloud == \d\e\v\c\l\o\u\d ]]
+ echo 'dev cloud'
dev cloud
+ gcloud container clusters get-credentials autopilot-cluster-1 --region us-central1 --project hydrotek-286213
Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Manage App Execution Aliases.
Fetching cluster endpoint and auth data.
kubeconfig entry generated for autopilot-cluster-1.
+ echo 'Cluster Name: kt-ai-autopilot-cluster1'
Cluster Name: kt-ai-autopilot-cluster1
+ NETWORKTYPE=LoadBalancer
+ '[' -z fungal-training-automation ']'
+ mainCI
+ echo 'MAIN CI'
MAIN CI
+ a=(${SELECTED_APP_CI_ARRAY[0]})
+ echo fungal-training-automation
fungal-training-automation
+ '[' fungal-training-automation == All ']'
+ IFS=', '
+ read -r -a arr
+ for i in "${arr[@]}"
+ temp=fungal-training-automation
+ temp=fungal-training-automation
+ echo fungal-training-automation
fungal-training-automation
+ i=fungal-training-automation
+ case "$i" in
+ SELECTED_APP_CI=HydroTek-22-FungalDetection/training-automation/training
+ CI_DIR=fungal-training-automation
+ REPOSITORY_DIR=hydro-ai-usecases
+ CONTAINERNAME=fungaltrainingautomation
+ CI_WORK_DIR=./hydrotek/cicdbuild/
+ CONTAINER_REGISTRY=gcr.io/hydrotek-286213
+ IMAGE_TAG=release
+ genericCI HydroTek-22-FungalDetection/training-automation/training fungal-training-automation hydro-ai-usecases fungaltrainingautomation ./hydrotek/cicdbuild/ gcr.io/hydrotek-286213 release
+ SELECTED_APP_CI=HydroTek-22-FungalDetection/training-automation/training
+ CI_DIR=fungal-training-automation
+ REPOSITORY_DIR=hydro-ai-usecases
+ CONTAINERNAME=fungaltrainingautomation
+ CI_WORK_DIR=./hydrotek/cicdbuild/
+ CONTAINER_REGISTRY=gcr.io/hydrotek-286213
+ IMAGE_TAG=v1
+ echo 'GENERIC CI'
GENERIC CI
+ echo 'Beginning Integration of HydroTek-22-FungalDetection/training-automation/training'
Beginning Integration of HydroTek-22-FungalDetection/training-automation/training
+ mkdir -p ./hydrotek/cicdbuild/
+ cd ./hydrotek/cicdbuild/
+ '[' -d hydro-ai-usecases ']'
+ cd hydro-ai-usecases
+ git pull
Already up to date.
+ gcloud auth print-access-token
+ docker login -u oauth2accesstoken --password-stdin https://gcr.io
Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Manage App Execution Aliases.
Login Succeeded
+ cd HydroTek-22-FungalDetection/training-automation/training
+ echo 'Docker Build gcr.io/hydrotek-286213/fungaltrainingautomation:v1 '
Docker Build gcr.io/hydrotek-286213/fungaltrainingautomation:v1 
+ docker build -t gcr.io/hydrotek-286213/fungaltrainingautomation:v1 .
#1 [internal] load build definition from Dockerfile
#1 sha256:3b38f61adf92ffa9b0bdb1809ee2ad9aa28dfaaffe8cf9e0f86bcf8ace98bfa6
#1 transferring dockerfile: 32B 0.0s done
#1 DONE 0.0s

#2 [internal] load .dockerignore
#2 sha256:178b1a6c5604983e7de88fe70fa1de66562c2249d9cf3d3a3e81cbe068813350
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [internal] load metadata for docker.io/library/python:3.8-slim
#3 sha256:a94c831f6b826f8ffd4325edd7e9f6408caa85fd7f03e2b107cc6a9d249f7065
#3 DONE 2.7s

#4 [1/7] FROM docker.io/library/python:3.8-slim@sha256:d560b10359a128fcc387c1453ae9656e1a18630da240bcbd14e3dc9f47b553c7
#4 sha256:2a4e54b197f43ece8c723a95da5dd20993c0079553221e63ac9fc810569b3930
#4 resolve docker.io/library/python:3.8-slim@sha256:d560b10359a128fcc387c1453ae9656e1a18630da240bcbd14e3dc9f47b553c7 0.0s done
#4 DONE 0.0s

#5 [internal] load build context
#5 sha256:3927a0115d7140c7ed8b8b0a8815d8bbff244b17f03b34d648c1eaf7a051d4a0
#5 transferring context: 245B done
#5 DONE 0.0s

#7 [3/7] WORKDIR /TrainingApi
#7 sha256:663190a352ad90b8f5def2831ae4f7de29fbc7557751c72bf0ff9e0e92fd02f9
#7 CACHED

#9 [5/7] RUN curl -sSL https://sdk.cloud.google.com | bash
#9 sha256:734a06566df5fb33477e8164d7e81db4447efcc70d727fe427c1794392d7a8ac
#9 CACHED

#10 [6/7] COPY googleserviceAcc.json /root/googleserviceAcc.json
#10 sha256:aa6f568e12490bd15e9ae6866b37dddcd84d0dfee5fa6c7799dfb90e75cd3115
#10 CACHED

#6 [2/7] COPY . /TrainingApi
#6 sha256:aee9da1af9acbf23d61c89d6d47e5a4b40c5f024dc3241d487fec8d5b4f75629
#6 CACHED

#8 [4/7] RUN pip install -r requirements.txt
#8 sha256:b3838b11b8c1d2136ce4155b35655d72e12feae02daee742a23ca833d1bbc03d
#8 CACHED

#11 [7/7] COPY boto.txt /root/.boto
#11 sha256:6800485b550faf71e9a204c0683cc6678240569cdf950b0181fef148766fb2a2
#11 CACHED

#12 exporting to image
#12 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00
#12 exporting layers done
#12 writing image sha256:ff03ba6217a029b817a6dbd93df1dbd5e6e438b6c6c40965857cf69fc7e800e7 done
#12 naming to gcr.io/hydrotek-286213/fungaltrainingautomation:v1 done
#12 DONE 0.0s

Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them
+ echo 'Docker Push gcr.io/hydrotek-286213/fungaltrainingautomation:v1'
Docker Push gcr.io/hydrotek-286213/fungaltrainingautomation:v1
+ docker push gcr.io/hydrotek-286213/fungaltrainingautomation:v1
The push refers to repository [gcr.io/hydrotek-286213/fungaltrainingautomation]
34e270645e26: Preparing
7bd191adec4c: Preparing
c4f199250eb1: Preparing
e4f7b1bd6f87: Preparing
5f70bf18a086: Preparing
afcb25cfba54: Preparing
1534b9ab760d: Preparing
55c7cf2a0aad: Preparing
df3872f12493: Preparing
43140e0754dc: Preparing
608f3a074261: Preparing
1534b9ab760d: Waiting
55c7cf2a0aad: Waiting
df3872f12493: Waiting
43140e0754dc: Waiting
608f3a074261: Waiting
afcb25cfba54: Waiting
5f70bf18a086: Layer already exists
34e270645e26: Pushed
7bd191adec4c: Pushed
c4f199250eb1: Pushed
afcb25cfba54: Pushed
1534b9ab760d: Layer already exists
df3872f12493: Layer already exists
55c7cf2a0aad: Layer already exists
43140e0754dc: Layer already exists
608f3a074261: Layer already exists
e4f7b1bd6f87: Pushed
v1: digest: sha256:ce3b198e0ecf1c0a01979d058a1b1446b11229985eb58895aae5023ab3d6a711 size: 2619
+ cd /c/ProgramData/Jenkins/.jenkins/workspace/Hydrotek-CICD-Pipeline
+ '[' -z fungal-training-automation ']'
+ mainCD
+ echo 'MAIN CD'
MAIN CD
+ a=(${SELECTED_APP_CD_ARRAY[0]})
+ echo fungal-training-automation
fungal-training-automation
+ '[' fungal-training-automation == All ']'
+ IFS=', '
+ read -r -a arr
+ for i in "${arr[@]}"
+ temp=fungal-training-automation
+ temp=fungal-training-automation
+ echo fungal-training-automation
fungal-training-automation
+ i=fungal-training-automation
+ case "$i" in
+ echo fungal-training-automation
fungal-training-automation
+ SELECTED_APP_CI=HydroTek-22-FungalDetection/training-automation/training
+ DEPLOYMENT=fungaltrainingautomation
+ NAMESPACE=dev
+ CONTAINERNAME=fungaltrainingautomation
+ CONTAINER_REGISTRY=gcr.io/hydrotek-286213
+ IMAGE_TAG=release
+ PORTNUM=5001
+ genericCD HydroTek-22-FungalDetection/training-automation/training fungaltrainingautomation dev fungaltrainingautomation gcr.io/hydrotek-286213 release 5001
+ SELECTED_APP_CD=HydroTek-22-FungalDetection/training-automation/training
+ DEPLOYMENT=fungaltrainingautomation
+ NAMESPACE=dev
+ CONTAINERNAME=fungaltrainingautomation
+ CONTAINER_REGISTRY=gcr.io/hydrotek-286213
+ IMAGE_TAG=v1
+ PORTNUM=5001
+ echo 'GENERIC CD'
GENERIC CD
+ echo 'Begining Deployment of HydroTek-22-FungalDetection/training-automation/training'
Begining Deployment of HydroTek-22-FungalDetection/training-automation/training
+ kubectl get deployments fungaltrainingautomation --namespace dev
+ grep -q fungaltrainingautomation
+ echo 'Updating the deployment with latest version'
Updating the deployment with latest version
+ SELECTED_IMAGE=gcr.io/hydrotek-286213/fungaltrainingautomation:v1
+ echo 'Selected Image gcr.io/hydrotek-286213/fungaltrainingautomation:v1'
Selected Image gcr.io/hydrotek-286213/fungaltrainingautomation:v1
+ echo 'kubectl set image deployment/fungaltrainingautomation fungaltrainingautomation=gcr.io/hydrotek-286213/fungaltrainingautomation:v1 --namespace dev'
kubectl set image deployment/fungaltrainingautomation fungaltrainingautomation=gcr.io/hydrotek-286213/fungaltrainingautomation:v1 --namespace dev
+ kubectl set image deployment/fungaltrainingautomation fungaltrainingautomation=gcr.io/hydrotek-286213/fungaltrainingautomation:v1 --namespace dev
+ echo 'kubectl rollout restart deployment fungaltrainingautomation --namespace dev'
kubectl rollout restart deployment fungaltrainingautomation --namespace dev
+ kubectl rollout restart deployment fungaltrainingautomation --namespace dev
deployment.apps/fungaltrainingautomation restarted
+ echo 'Updated Deployment'
Updated Deployment
+ echo 'kubectl set env -n dev --from=secret/mongocredentialsdevcloud deployment/fungaltrainingautomation'
kubectl set env -n dev --from=secret/mongocredentialsdevcloud deployment/fungaltrainingautomation
+ kubectl set env -n dev --from=secret/mongocredentialsdevcloud deployment/fungaltrainingautomation
+ cd /c/ProgramData/Jenkins/.jenkins/workspace/Hydrotek-CICD-Pipeline
Finished: SUCCESS
