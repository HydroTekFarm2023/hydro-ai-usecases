{
	"info": {
		"_postman_id": "9fdbc022-97d7-46cc-8fe1-fc99134e388f",
		"name": "detect-collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "gcp-classify",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function() {\r",
							"  pm.response.to.have.status(200);\r",
							"})\r",
							"var schema = {\r",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"\"type\": \"object\",\r",
							"\"properties\": {\r",
							"  \"class\": {\r",
							"    \"type\": \"string\"\r",
							"  },\r",
							"  \"confidence\": {\r",
							"    \"type\": \"number\"\r",
							"  }\r",
							"},\r",
							"\"required\": [\r",
							"  \"class\",\r",
							"  \"confidence\",\r",
							"]\r",
							"}\r",
							"var json = pm.response.json()\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(json, schema)).to.be.true;\r",
							"})\r",
							"pm.test('Classification Test', function(){\r",
							"    pm.expect(json.class).to.equal('Tomato___Bacterial_spot');\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{fungal-classify-host}}:{{fungal-classify-port}}/v1/fungalclassification/treatment?imageName={{classify-image-id}}.jpg&source=hydrotek-2022&model_name=tomato&model_path=hydrotek-2022/fungal-models&dest=hydrotek-2022",
					"protocol": "http",
					"host": [
						"{{fungal-classify-host}}"
					],
					"port": "{{fungal-classify-port}}",
					"path": [
						"v1",
						"fungalclassification",
						"treatment"
					],
					"query": [
						{
							"key": "imageName",
							"value": "{{classify-image-id}}.jpg"
						},
						{
							"key": "source",
							"value": "hydrotek-2022"
						},
						{
							"key": "model_name",
							"value": "tomato"
						},
						{
							"key": "model_path",
							"value": "hydrotek-2022/fungal-models"
						},
						{
							"key": "dest",
							"value": "hydrotek-2022"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "gcp-detect",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function() {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"class\": {\r",
							"      \"type\": \"array\"\r",
							"    },\r",
							"    \"confidence\": {\r",
							"        \"type\": \"array\"\r",
							"      },\r",
							"    \"name\": {\r",
							"    \"type\": \"array\"\r",
							"    },\r",
							"    \"pest\": {\r",
							"    \"type\": \"array\"\r",
							"    },\r",
							"    \"xmax\": {\r",
							"    \"type\": \"array\"\r",
							"    },\r",
							"    \"xmin\": {\r",
							"        \"type\": \"array\"\r",
							"        },\r",
							"    \"ymax\": {\r",
							"        \"type\": \"array\"\r",
							"        },\r",
							"    \"ymin\": {\r",
							"        \"type\": \"array\"\r",
							"        }\r",
							"      ,\r",
							"  \"required\": [\r",
							"    \"class\",\r",
							"    \"confidence\",\r",
							"    \"pest\",\r",
							"    \"xmax\",\r",
							"    \"xmin\",\r",
							"    \"ymax\",\r",
							"    \"ymin\"\r",
							"  ]\r",
							"}}\r",
							"var json = pm.response.json()\r",
							"pm.test('Schema is valid', function() {\r",
							"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
							"})\r",
							"pm.test('Detection-Test', function ()\r",
							"{\r",
							"  pm.expect(json.name[0]).to.equal('45');  \r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{pest-detect-host}}:{{pest-detect-port}}/v1/pestdetection/predict?source=hydrotek-2022&imageName=t{{detect-image-id}}.jpg&dest=hydrotek-2022",
					"protocol": "http",
					"host": [
						"{{pest-detect-host}}"
					],
					"port": "{{pest-detect-port}}",
					"path": [
						"v1",
						"pestdetection",
						"predict"
					],
					"query": [
						{
							"key": "source",
							"value": "hydrotek-2022"
						},
						{
							"key": "imageName",
							"value": "t{{detect-image-id}}.jpg"
						},
						{
							"key": "dest",
							"value": "hydrotek-2022"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "gcp-plant-growth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function() {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"height\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"width\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"status\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"height\",\r",
							"    \"width\",\r",
							"    \"status\"\r",
							"  ]\r",
							"}\r",
							"var json = pm.response.json()\r",
							"pm.test('Schema is valid', function() {\r",
							"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
							"})\r",
							"const heights = [14.33, 23.73, 4.71, 7.99, 13.17]\r",
							"const widths = [21.37, 12.16, 7.9, 7.42, 23.08]\r",
							"pm.test('Values match', function() {\r",
							"    const demoTest = pm.response.json();\r",
							"    pm.expect(demoTest.height).to.be.oneOf(heights);\r",
							"    pm.expect(demoTest.width).to.be.oneOf(widths);\r",
							"    pm.expect(demoTest.status).to.eql(\"SUCCESS\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{plant-growth-host}}:{{plant-growth-port}}/PlantGrowth?ImagePath=hydrotekai/HeightAnalysis/NFTtest2.jpg&system=NFT&PlantId=1&apitype=devtest&CustomerDb=hydrotek",
					"protocol": "http",
					"host": [
						"{{plant-growth-host}}"
					],
					"port": "{{plant-growth-port}}",
					"path": [
						"PlantGrowth"
					],
					"query": [
						{
							"key": "ImagePath",
							"value": "hydrotekai/HeightAnalysis/NFTtest2.jpg"
						},
						{
							"key": "system",
							"value": "NFT"
						},
						{
							"key": "PlantId",
							"value": "1"
						},
						{
							"key": "apitype",
							"value": "devtest"
						},
						{
							"key": "CustomerDb",
							"value": "hydrotek"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "gcp-thermal-analysis",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function() {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"mean_temperature\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"health_status\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"status\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"mean_temperature\",\r",
							"    \"health_status\",\r",
							"    \"status\"\r",
							"  ]\r",
							"}\r",
							"var json = pm.response.json()\r",
							"pm.test('Schema is valid', function() {\r",
							"    pm.expect(tv4.validate(json, schema)).to.be.true;\r",
							"})\r",
							"const temps = [133.0,]\r",
							"const statuses = [\"Plant is not healthly\"]\r",
							"pm.test('Values match', function() {\r",
							"    const demoTest = pm.response.json();\r",
							"    pm.expect(demoTest.mean_temperature).to.be.oneOf(temps);\r",
							"    pm.expect(demoTest.health_status).to.be.oneOf(statuses);\r",
							"    pm.expect(demoTest.status).to.eql(\"SUCCESS\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{thermal-analysis-host}}:{{thermal-analysis-port}}/thermalanalysis?ImagePath=hydrotekai/thermal_images/cropped_leaf.jpg&X=9&Y=10&Height=170&Width=201&Threshold=20&PlantType=lettuce&apitype=devtest&CustomerDb=hydrotek",
					"protocol": "http",
					"host": [
						"{{thermal-analysis-host}}"
					],
					"port": "{{thermal-analysis-port}}",
					"path": [
						"thermalanalysis"
					],
					"query": [
						{
							"key": "ImagePath",
							"value": "hydrotekai/thermal_images/cropped_leaf.jpg"
						},
						{
							"key": "X",
							"value": "9"
						},
						{
							"key": "Y",
							"value": "10"
						},
						{
							"key": "Height",
							"value": "170"
						},
						{
							"key": "Width",
							"value": "201"
						},
						{
							"key": "Threshold",
							"value": "20"
						},
						{
							"key": "PlantType",
							"value": "lettuce"
						},
						{
							"key": "apitype",
							"value": "devtest"
						},
						{
							"key": "CustomerDb",
							"value": "hydrotek"
						}
					]
				}
			},
			"response": []
		}
	]
}